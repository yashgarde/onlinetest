{
    "s3": {
        "endpoint": "http://127.0.0.1:9002",
        "bucketname": "sitespeedio",
        "key": "sitespeedio",
        "secret": "tracksofmytears",
        "region": "motown"
    },
    "resultBaseURL": "http://127.0.0.1:9002/sitespeedio",
    "visualMetrics": true,
    "copyLatestFilesToBase": true,
    "screenshot": {
        "type": "jpg"
    },
    "videoParams": {
        "createFilmstrip": true,
        "framerate": 60
    },
    "browsertime": {
        "video": true
    },
    "html": {
        "showAllWaterfallSummary": true
    },
    "graphite": {
        "host": "127.0.0.1"
    },
    "filmstrip": {
        "showAll": true
    },
    "viewPort": "1280x1024",
    "injectJs": "window.sitespeed = (function() {\n\nfunction normalizeSelector(sel) {\n  function saveUnmatched() {\n    if (unmatched) {\n      if (tokens.length > 0 && \/^[~+>]$\/.test(tokens[tokens.length - 1])) {\n        tokens.push(\" \");\n      }\n      tokens.push(unmatched);\n    }\n  }\n\n  var tokens = [],\n    match,\n    unmatched,\n    regex,\n    state = [0],\n    next_match_idx = 0,\n    prev_match_idx,\n    not_escaped_pattern = \/(?:[^\\\\]|(?:^|[^\\\\])(?:\\\\\\\\)+)$\/,\n    whitespace_pattern = \/^\\s+$\/,\n    state_patterns = [\n      \/\\s+|\\\/\\*|[\"'>~+[(]\/g, \/\/ general\n      \/\\s+|\\\/\\*|[\"'[\\]()]\/g, \/\/ [..] set\n      \/\\s+|\\\/\\*|[\"'[\\]()]\/g, \/\/ (..) set\n      null, \/\/ string literal (placeholder)\n      \/\\*\\\/\/g, \/\/ comment\n    ];\n  sel = sel.trim();\n\n  while (true) {\n    unmatched = \"\";\n    regex = state_patterns[state[state.length - 1]];\n    regex.lastIndex = next_match_idx;\n    match = regex.exec(sel);\n\n    if (match) {\n      prev_match_idx = next_match_idx;\n      next_match_idx = regex.lastIndex;\n\n      if (prev_match_idx < next_match_idx - match[0].length) {\n        unmatched = sel.substring(prev_match_idx, next_match_idx - match[0].length);\n      }\n\n      if (state[state.length - 1] < 3) {\n        saveUnmatched();\n\n        if (match[0] === \"[\") {\n          state.push(1);\n        } else if (match[0] === \"(\") {\n          state.push(2);\n        } else if (\/^[\"']$\/.test(match[0])) {\n          state.push(3);\n          state_patterns[3] = new RegExp(match[0], \"g\");\n        } else if (match[0] === \"\/*\") {\n          state.push(4);\n        } else if (\/^(?:\\s+|[~+>])$\/.test(match[0])) {\n          if (tokens.length > 0 && !whitespace_pattern.test(tokens[tokens.length - 1]) && state[state.length - 1] === 0) {\n            tokens.push(\" \");\n          }\n          if (whitespace_pattern.test(match[0])) {\n            continue;\n          }\n        }\n\n        tokens.push(match[0]);\n      } else {\n        tokens[tokens.length - 1] += unmatched;\n\n        if (not_escaped_pattern.test(tokens[tokens.length - 1])) {\n          if (state[state.length - 1] === 4) {\n            if (tokens.length < 2 || whitespace_pattern.test(tokens[tokens.length - 2])) {\n              tokens.pop();\n            } else {\n              tokens[tokens.length - 1] = \" \";\n            }\n            match[0] = \"\";\n          }\n          state.pop();\n        }\n\n        tokens[tokens.length - 1] += match[0];\n      }\n    } else {\n      unmatched = sel.substr(next_match_idx);\n      saveUnmatched();\n      break;\n    }\n  }\n\n  return tokens.join(\"\").trim();\n}\n\nfunction querySelectorAllDeep(selector, root, allElements) {\n  root = root || document;\n  allElements = allElements || null;\n  return _querySelectorDeep(selector, true, root, allElements);\n}\n\nfunction querySelectorDeep(selector, root, allElements) {\n  root = root || document;\n  allElements = allElements || null;\n  return _querySelectorDeep(selector, false, root, allElements);\n}\n\/\/ added escape sequence\nfunction escapeSelector(selector) {\n    return selector.split(' ').map(part => {\n        if (part.startsWith('#')) {\n            return `#${CSS.escape(part.slice(1))}`;\n        } else if (part.startsWith('.')) {\n            return `.${CSS.escape(part.slice(1))}`;\n        }\n        return part;\n    }).join(' ');\n}\n\nfunction _querySelectorDeep(selector, findMany, root, allElements) {\n  selector = escapeSelector(normalizeSelector(selector));\n  var lightElement = root.querySelector(selector);\n\n  if (document.head.createShadowRoot || document.head.attachShadow) {\n    if (!findMany && lightElement) {\n      return lightElement;\n    }\n\n    var selectionsToMake = splitByCharacterUnlessQuoted(selector, ',');\n\n    return selectionsToMake.reduce(function(acc, minimalSelector) {\n      if (!findMany && acc) {\n        return acc;\n      }\n      var splitSelector = splitByCharacterUnlessQuoted(minimalSelector.replace(\/^\\s+\/g, '').replace(\/\\s*([>+~]+)\\s*\/g, '$1'), '').filter(function(entry) {\n        return !!entry;\n      }).map(function(entry) {\n        return splitByCharacterUnlessQuoted(entry, '>');\n      });\n\n      var possibleElementsIndex = splitSelector.length - 1;\n      var lastSplitPart = splitSelector[possibleElementsIndex][splitSelector[possibleElementsIndex].length - 1];\n      var possibleElements = collectAllElementsDeep(lastSplitPart, root, allElements);\n      var findElements = findMatchingElement(splitSelector, possibleElementsIndex, root);\n\n      if (findMany) {\n        acc = acc.concat(possibleElements.filter(findElements));\n        return acc;\n      } else {\n        acc = possibleElements.find(findElements);\n        return acc || null;\n      }\n    }, findMany ? [] : null);\n  } else {\n    if (!findMany) {\n      return lightElement;\n    } else {\n      return root.querySelectorAll(selector);\n    }\n  }\n}\n\nfunction findMatchingElement(splitSelector, possibleElementsIndex, root) {\n  return function(element) {\n    var position = possibleElementsIndex;\n    var parent = element;\n    var foundElement = false;\n\n    while (parent && !isDocumentNode(parent)) {\n      var foundMatch = true;\n\n      if (splitSelector[position].length === 1) {\n        foundMatch = parent.matches(splitSelector[position]);\n      } else {\n        var reversedParts = splitSelector[position].concat([]).reverse();\n        var newParent = parent;\n\n        for (var i = 0; i < reversedParts.length; i++) {\n          if (!newParent || !newParent.matches(reversedParts[i])) {\n            foundMatch = false;\n            break;\n          }\n          newParent = findParentOrHost(newParent, root);\n        }\n      }\n\n      if (foundMatch && position === 0) {\n        foundElement = true;\n        break;\n      }\n      if (foundMatch) {\n        position--;\n      }\n      parent = findParentOrHost(parent, root);\n    }\n\n    return foundElement;\n  };\n}\n\nfunction splitByCharacterUnlessQuoted(selector, character) {\n  return selector.match(\/\\\\?.|^$\/g).reduce(function(p, c) {\n    if (c === '\"' && !p.sQuote) {\n      p.quote ^= 1;\n      p.a[p.a.length - 1] += c;\n    } else if (c === '\\'' && !p.quote) {\n      p.sQuote ^= 1;\n      p.a[p.a.length - 1] += c;\n    } else if (!p.quote && !p.sQuote && c === character) {\n      p.a.push('');\n    } else {\n      p.a[p.a.length - 1] += c;\n    }\n    return p;\n  }, { a: [''] }).a;\n}\n\nfunction isDocumentNode(node) {\n  return node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.DOCUMENT_NODE;\n}\n\nfunction findParentOrHost(element, root) {\n  var parentNode = element.parentNode;\n  return (parentNode && parentNode.host && parentNode.nodeType === 11) ? parentNode.host : (parentNode === root ? null : parentNode);\n}\n\nfunction getOptions(defaults, options){\n    \/\/ Merge default options with passed-in options\n    var mergedOptions = {};\n\n    \/\/ Copy default options to mergedOptions\n    for (var key in defaults) {\n        if (defaults.hasOwnProperty(key)) {\n            mergedOptions[key] = defaults[key];\n        }\n    }\n\n    \/\/ Override default options with passed-in options\n    for (var key2 in options) {\n        if (options.hasOwnProperty(key2)) {\n            mergedOptions[key2] = options[key2];\n        }\n    }\n\n    return mergedOptions;\n}\n\nfunction click(selectorString, options){\n\n    \/\/ Default options\n    const defaults = {\n        wildcard: '',\n        parent: null,\n        cssSelector: 'aria-label',\n        order: 0\n    };\n\n    var wildcard = '';\n    if(typeof options === 'object' && options !== null){\n        options = getOptions(defaults, options);\n        wildcard = options.wildcard;\n    }else if(typeof options !== 'undefined'){\n        wildcard = options;\n        options = defaults;\n    }else{\n        options = defaults;\n    }\n\n    var selectorFunction = querySelectorDeep;\n    if(options.order != 0){\n        selectorFunction = querySelectorAllDeep;\n    }\n\n    if(options.parent == null){\n        \/\/try to find the element without checking inside of the iframe\n        var el = selectorFunction('['+ options.cssSelector + wildcard + '=\"'+ selectorString +'\"]') ;\n\n        \/\/if we couldn't find the element try to check within the first available iframe\n        if(el == null || (typeof el == 'object' && Array.isArray(el))){\n            el = selectorFunction('['+ options.cssSelector + wildcard + '=\"'+ selectorString +'\"]', querySelectorDeep('iframe').contentDocument);\n        }\n\n    }else{\n        el = selectorFunction('['+ options.cssSelector + wildcard + '=\"'+ selectorString +'\"]', options.parent);\n    }\n\n    if(options.order != 0){\n       el = el[options.order];\n    }\n\n    el.click();\n}\n\nfunction collectAllElementsDeep(selector, root, cachedElements) {\n  var allElements = [];\n\n  if (cachedElements) {\n    allElements = cachedElements;\n  } else {\n    var findAllElements = function(nodes) {\n      for (var i = 0; i < nodes.length; i++) {\n        var el = nodes[i];\n        allElements.push(el);\n        if (el.shadowRoot) {\n          findAllElements(el.shadowRoot.querySelectorAll('*'));\n        }\n      }\n    };\n    if (root.shadowRoot) {\n      findAllElements(root.shadowRoot.querySelectorAll('*'));\n    }\n    findAllElements(root.querySelectorAll('*'));\n  }\n\n  return selector ? allElements.filter(function(el) {\n    return el.matches(selector);\n  }) : allElements;\n}\n    \/\/ Public API: Expose some key functionality\n    return {\n        select: querySelectorDeep,\n        selectAll: querySelectorAllDeep,\n        click: click\n    };\n})();"

}
